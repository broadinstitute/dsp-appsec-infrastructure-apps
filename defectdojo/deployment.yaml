apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: ${STATEFUL_SET}
  namespace: ${NAMESPACE}
spec:
  serviceName: ${SERVICE}
  selector:
    matchLabels:
      service: ${SERVICE}
  template:
    metadata:
      labels:
        service: ${SERVICE}
    spec:
      serviceAccountName: ${SERVICE_ACCOUNT}
      nodeSelector:
        cloud.google.com/gke-nodepool: apps
      tolerations:
      - key: sandbox.gke.io/runtime
        operator: Equal
        value: gvisor
        effect: NoSchedule

      volumes:
      - name: ${SERVICE_VOLUME}
        persistentVolumeClaim:
          claimName: ${SERVICE_VOLUME}

      initContainers:
      - name: media
        image: ${DD_DJANGO_IMAGE}
        command: ['chown', '1001', /media]
        volumeMounts:
        - name: ${SERVICE_VOLUME}
          mountPath: /media
        securityContext:
          runAsUser: 0
          allowPrivilegeEscalation: false

      containers:
      - name: nginx
        image: defectdojo/defectdojo-nginx
        env:
        - name: DD_UWSGI_HOST
          value: ${LOCALHOST}
        ports:
        - name: ${TARGET_PORT}
          containerPort: 8080
        readinessProbe:
          httpGet:
            path: /login
            port: ${TARGET_PORT}
          timeoutSeconds: 10
        volumeMounts:
        - name: ${SERVICE_VOLUME}
          mountPath: /usr/share/nginx/html/media
          readOnly: true

      - name: uwsgi
        image: ${DD_DJANGO_IMAGE}
        command:
        - /entrypoint-uwsgi.sh
        envFrom:
        - configMapRef:
            name: ${DJANGO_CONFIG}
        - secretRef:
            name: ${DJANGO_SECRET}
        - configMapRef:
            name: ${CELERY_CONFIG}
        - secretRef:
            name: ${CELERY_SECRET}
        env:
        - name: DD_ALLOWED_HOSTS
          value: '*' # validated by Ingress
        - name: DD_DEBUG
          value: 'False'
        - name: DD_SOCIAL_AUTH_GOOGLE_OAUTH2_ENABLED
          value: 'True'
        - name: DD_SOCIAL_AUTH_GOOGLE_OAUTH2_WHITELISTED_DOMAINS
          value: '["broadinstitute.org"]' #should be made dynamic
        - name: DD_SOCIAL_AUTH_GOOGLE_OAUTH2_KEY
          valueFrom:
            secretKeyRef:
              name: googleoauth2
              key: oauth2_key
              optional: false
        - name: DD_SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET
          valueFrom:
            secretKeyRef:
              name: googleoauth2
              key: oauth2_secret
              optional: false  
        volumeMounts:
        - name: ${SERVICE_VOLUME}
          mountPath: /app/media
        resources:
          requests:
            memory: 250M

      - name: celerybeat
        image: ${DD_DJANGO_IMAGE}
        command:
        - /entrypoint-celery-beat.sh
        envFrom:
        - configMapRef:
            name: ${DJANGO_CONFIG}
        - secretRef:
            name: ${DJANGO_SECRET}
        - configMapRef:
            name: ${CELERY_CONFIG}
        - secretRef:
            name: ${CELERY_SECRET}
        resources:
          requests:
            memory: 130M

      - name: celeryworker
        image: ${DD_DJANGO_IMAGE}
        command:
        - /entrypoint-celery-worker.sh
        envFrom:
        - configMapRef:
            name: ${DJANGO_CONFIG}
        - secretRef:
            name: ${DJANGO_SECRET}
        - configMapRef:
            name: ${CELERY_CONFIG}
        - secretRef:
            name: ${CELERY_SECRET}
        resources:
          requests:
            memory: 130M

      - name: rabbitmq
        image: rabbitmq
        env:
        - name: RABBITMQ_DEFAULT_USER
          valueFrom:
            configMapKeyRef:
              name: ${CELERY_CONFIG}
              key: DD_CELERY_BROKER_USER
        - name: RABBITMQ_DEFAULT_PASS
          valueFrom:
            secretKeyRef:
              name: ${CELERY_SECRET}
              key: DD_CELERY_BROKER_PASSWORD
        resources:
          requests:
            memory: 90M

      - name: initializer
        image: ${DD_DJANGO_IMAGE}
        command: ['sh', '-c', '/entrypoint-initializer.sh && sleep infinity']
        envFrom:
        - configMapRef:
            name: ${DJANGO_CONFIG}
        - secretRef:
            name: ${DJANGO_SECRET}
        - configMapRef:
            name: ${ADMIN_CONFIG}
        - secretRef:
            name: ${ADMIN_SECRET}
        env:
        - name: DD_INITIALIZE
          value: 'true'

      - name: cloudsql-proxy
        image: gcr.io/cloudsql-docker/gce-proxy
        imagePullPolicy: Always
        command:
        - /cloud_sql_proxy
        - -instances=${SQL_INSTANCE_URI}
---
apiVersion: iam.cnrm.cloud.google.com/v1beta1
kind: IAMPolicyMember
metadata:
  name: ${SERVICE_ACCOUNT}-sa-sql-policy
  namespace: ${NAMESPACE}
spec:
  member: serviceAccount:${SERVICE_ACCOUNT}@${PROJECT_ID}.iam.gserviceaccount.com
  role: roles/cloudsql.client
  resourceRef:
    apiVersion: resourcemanager.cnrm.cloud.google.com/v1beta1
    kind: Project
    external: projects/${PROJECT_ID}
---
apiVersion: sql.cnrm.cloud.google.com/v1beta1
kind: SQLUser
metadata:
  name: ${DD_DATABASE_USER}
  namespace: ${NAMESPACE}
  annotations:
    cnrm.cloud.google.com/deletion-policy: abandon
spec:
  instanceRef:
    name: ${SQL_INSTANCE}
  password:
    valueFrom:
      secretKeyRef:
        name: ${DJANGO_SECRET}
        key: DD_DATABASE_PASSWORD
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: ${DJANGO_CONFIG}
  namespace: ${NAMESPACE}
data:
  DD_DATABASE_TYPE: postgres
  DD_DATABASE_ENGINE: django.db.backends.postgresql_psycopg2
  DD_DATABASE_HOST: ${LOCALHOST}
  DD_DATABASE_PORT: '${DD_DATABASE_PORT}'
  DD_DATABASE_NAME: postgres
  DD_DATABASE_USER: ${DD_DATABASE_USER}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: ${CELERY_CONFIG}
  namespace: ${NAMESPACE}
data:
  DD_CELERY_BROKER_SCHEME: amqp
  DD_CELERY_BROKER_HOST: ${LOCALHOST}
  DD_CELERY_BROKER_PORT: '5672'
  DD_CELERY_BROKER_PATH: /
  DD_CELERY_BROKER_USER: celery
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: ${ADMIN_CONFIG}
  namespace: ${NAMESPACE}
data:
  DD_ADMIN_FIRST_NAME: AppSec
  DD_ADMIN_LAST_NAME: Admin
  DD_ADMIN_MAIL: appsec@broadinstitute.org
  DD_ADMIN_USER: admin
