apiVersion: compute.cnrm.cloud.google.com/v1beta1
kind: ComputeAddress
metadata:
  name: ${IP_NAME}
spec:
  location: global
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ${DEPLOYMENT}
  namespace: ${NAMESPACE}
spec:
  replicas: 1
  selector:
    matchLabels:
      deployment: ${DEPLOYMENT}
  template:
    metadata:
      labels:
        deployment: ${DEPLOYMENT}
    spec:
      serviceAccountName: ${SERVICE_ACCOUNT}
      containers:
      - name: nginx
        image: defectdojo/defectdojo-nginx
        env:
        - name: DD_UWSGI_HOST
          value: ${LOCALHOST}
        ports:
        - name: ${TARGET_PORT}
          containerPort: 8080
        readinessProbe:
          httpGet:
            path: /login
            port: ${TARGET_PORT}
        resources:
          requests:
            cpu: 50m

      - name: uwsgi
        image: ${DD_IMAGE}
        command:
        - /entrypoint-uwsgi.sh
        envFrom:
        - configMapRef:
            name: ${DJANGO_CONFIG}
        - secretRef:
            name: ${DJANGO_SECRET}
        - configMapRef:
            name: ${CELERY_CONFIG}
        - secretRef:
            name: ${CELERY_SECRET}
        env:
        - name: DD_ALLOWED_HOSTS
          value: '*'
        - name: DD_DEBUG
          value: 'False'
        resources:
          requests:
            cpu: 50m

      - name: celerybeat
        image: ${DD_IMAGE}
        command:
        - /entrypoint-celery-beat.sh
        envFrom:
        - configMapRef:
            name: ${DJANGO_CONFIG}
        - secretRef:
            name: ${DJANGO_SECRET}
        - configMapRef:
            name: ${CELERY_CONFIG}
        - secretRef:
            name: ${CELERY_SECRET}
        resources:
          requests:
            cpu: 50m

      - name: celeryworker
        image: ${DD_IMAGE}
        command:
        - /entrypoint-celery-worker.sh
        envFrom:
        - configMapRef:
            name: ${DJANGO_CONFIG}
        - secretRef:
            name: ${DJANGO_SECRET}
        - configMapRef:
            name: ${CELERY_CONFIG}
        - secretRef:
            name: ${CELERY_SECRET}
        resources:
          requests:
            cpu: 50m

      - name: initializer
        image: ${DD_IMAGE}
        command: ['sh', '-c', '/entrypoint-initializer.sh && sleep infinity']
        envFrom:
        - configMapRef:
            name: ${DJANGO_CONFIG}
        - secretRef:
            name: ${DJANGO_SECRET}
        - configMapRef:
            name: ${ADMIN_CONFIG}
        - secretRef:
            name: ${ADMIN_SECRET}
        env:
        - name: DD_INITIALIZE
          value: 'true'
        resources:
          requests:
            cpu: 50m

      - name: rabbitmq
        image: rabbitmq
        resources:
          requests:
            cpu: 50m
        env:
        - name: RABBITMQ_DEFAULT_USER
          valueFrom:
            configMapKeyRef:
              name: ${CELERY_CONFIG}
              key: DD_CELERY_BROKER_USER
        - name: RABBITMQ_DEFAULT_PASS
          valueFrom:
            secretKeyRef:
              name: ${CELERY_SECRET}
              key: DD_CELERY_BROKER_PASSWORD

      - name: cloudsql-proxy
        image: gcr.io/cloudsql-docker/gce-proxy
        command:
        - /cloud_sql_proxy
        - -instances=${PROJECT_ID}:${SQL_REGION}:${SQL_INSTANCE}=tcp:${DD_DATABASE_PORT}
        securityContext:
          runAsUser: 2 # non-root user
          allowPrivilegeEscalation: false
        resources:
          requests:
            cpu: 50m
---
apiVersion: iam.cnrm.cloud.google.com/v1beta1
kind: IAMPolicyMember
metadata:
  name: ${SERVICE_ACCOUNT}-sa-sql-policy
spec:
  member: serviceAccount:${SERVICE_ACCOUNT}@${PROJECT_ID}.iam.gserviceaccount.com
  role: roles/cloudsql.client
  resourceRef:
    kind: Project
---
apiVersion: sql.cnrm.cloud.google.com/v1beta1
kind: SQLInstance
metadata:
  name: ${SQL_INSTANCE}
  annotations:
    cnrm.cloud.google.com/deletion-policy: abandon
spec:
  databaseVersion: POSTGRES_11
  region: ${SQL_REGION}
  settings:
    tier: db-custom-1-3840
    backupConfiguration:
      enabled: true
---
apiVersion: sql.cnrm.cloud.google.com/v1beta1
kind: SQLUser
metadata:
  name: ${DD_DATABASE_USER}
spec:
  instanceRef:
    name: ${SQL_INSTANCE}
  password:
    valueFrom:
      secretKeyRef:
        name: ${DJANGO_SECRET}
        key: DD_DATABASE_PASSWORD
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: ${DJANGO_CONFIG}
  namespace: ${NAMESPACE}
data:
  DD_DATABASE_TYPE: postgres
  DD_DATABASE_ENGINE: django.db.backends.postgresql_psycopg2
  DD_DATABASE_HOST: ${LOCALHOST}
  DD_DATABASE_PORT: '${DD_DATABASE_PORT}'
  DD_DATABASE_NAME: postgres
  DD_DATABASE_USER: ${DD_DATABASE_USER}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: ${CELERY_CONFIG}
  namespace: ${NAMESPACE}
data:
  DD_CELERY_BROKER_HOST: ${LOCALHOST}
  DD_CELERY_BROKER_USER: celery
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: ${ADMIN_CONFIG}
  namespace: ${NAMESPACE}
data:
  DD_ADMIN_FIRST_NAME: AppSec
  DD_ADMIN_LAST_NAME: Admin
  DD_ADMIN_MAIL: appsec@broadinstitute.org
  DD_ADMIN_USER: admin
