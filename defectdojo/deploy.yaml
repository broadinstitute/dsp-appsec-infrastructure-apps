apiVersion: networking.gke.io/v1beta1
kind: ManagedCertificate
metadata:
  name: defectdojo
spec:
  domains:
  - ${DNS_HOSTNAME}
---
apiVersion: compute.cnrm.cloud.google.com/v1beta1
kind: ComputeAddress
metadata:
  name: defectdojo
spec:
  location: global
---
apiVersion: compute.cnrm.cloud.google.com/v1beta1
kind: ComputeSecurityPolicy
metadata:
  name: defectdojo
spec:
  rule:
  - action: allow
    priority: 1
    match:
      versionedExpr: SRC_IPS_V1
      config:
        srcIpRanges:
        - 69.173.112.0/21
        - 69.173.127.232/29
        - 69.173.127.128/26
        - 69.173.127.0/25
        - 69.173.127.240/28
  - action: allow
    priority: 2
    match:
      versionedExpr: SRC_IPS_V1
      config:
        srcIpRanges:
        - 69.173.127.224/30
        - 69.173.127.230/31
        - 69.173.120.0/22
        - 69.173.127.228/32
        - 69.173.126.0/24
  - action: allow
    priority: 3
    match:
      versionedExpr: SRC_IPS_V1
      config:
        srcIpRanges:
        - 69.173.96.0/20
        - 69.173.64.0/19
        - 69.173.127.192/27
        - 69.173.124.0/23
  - action: deny(403)
    priority: 2147483647
    match:
      versionedExpr: SRC_IPS_V1
      config:
        srcIpRanges:
        - '*'
---
apiVersion: cloud.google.com/v1beta1
kind: BackendConfig
metadata:
  name: defectdojo
spec:
  securityPolicy:
    name: defectdojo
---
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: defectdojo
  annotations:
    kubernetes.io/ingress.allow-http: 'false'
    kubernetes.io/ingress.global-static-ip-name: defectdojo
    networking.gke.io/managed-certificates: defectdojo
spec:
  backend:
    serviceName: defectdojo
    servicePort: 80
---
apiVersion: v1
kind: Service
metadata:
  name: defectdojo
  annotations:
    cloud.google.com/neg: |
      {
        "ingress": true
      }
    beta.cloud.google.com/backend-config: |
      {
        "ports": {
          "80": "defectdojo"
        }
      }
spec:
  type: NodePort
  selector:
    service: defectdojo
  ports:
  - protocol: TCP
    port: 80
    targetPort: 8080
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: defectdojo
spec:
  replicas: 1
  selector:
    matchLabels:
      service: defectdojo
  template:
    metadata:
      labels:
        service: defectdojo
    spec:
      serviceAccountName: defectdojo
      containers:
      - name: nginx
        image: defectdojo/defectdojo-nginx
        env:
        - name: DD_UWSGI_HOST
          value: 127.0.0.1
        ports:
        - containerPort: 8080
        readinessProbe:
          httpGet:
            path: /login
            port: 8080
        resources:
          requests:
            cpu: 50m

      - name: uwsgi
        image: ${DOJO_DOCKER}
        command:
        - /entrypoint-uwsgi.sh
        envFrom:
        - configMapRef:
            name: django
        - secretRef:
            name: django
        - configMapRef:
            name: celery
        - secretRef:
            name: celery
        env:
        - name: DD_ALLOWED_HOSTS
          value: '*'
        - name: DD_DEBUG
          value: 'False'
        resources:
          requests:
            cpu: 50m

      - name: celerybeat
        image: ${DOJO_DOCKER}
        command:
        - /entrypoint-celery-beat.sh
        envFrom:
        - configMapRef:
            name: django
        - secretRef:
            name: django
        - configMapRef:
            name: celery
        - secretRef:
            name: celery
        resources:
          requests:
            cpu: 50m

      - name: celeryworker
        image: ${DOJO_DOCKER}
        command:
        - /entrypoint-celery-worker.sh
        envFrom:
        - configMapRef:
            name: django
        - secretRef:
            name: django
        - configMapRef:
            name: celery
        - secretRef:
            name: celery
        resources:
          requests:
            cpu: 50m

      - name: initializer
        image: ${DOJO_DOCKER}
        command: ['sh', '-c', '/entrypoint-initializer.sh && sleep infinity']
        envFrom:
        - configMapRef:
            name: django
        - secretRef:
            name: django
        - configMapRef:
            name: admin
        - secretRef:
            name: admin
        env:
        - name: DD_INITIALIZE
          value: 'true'
        resources:
          requests:
            cpu: 50m

      - name: rabbitmq
        image: rabbitmq
        resources:
          requests:
            cpu: 50m
        env:
        - name: RABBITMQ_DEFAULT_USER
          valueFrom:
            configMapKeyRef:
              name: celery
              key: DD_CELERY_BROKER_USER
        - name: RABBITMQ_DEFAULT_PASS
          valueFrom:
            secretKeyRef:
              name: celery
              key: DD_CELERY_BROKER_PASSWORD

      - name: cloudsql-proxy
        image: gcr.io/cloudsql-docker/gce-proxy
        command:
        - /cloud_sql_proxy
        - -instances=${PROJECT_ID}:${SQL_REGION}:${SQL_INSTANCE}=tcp:${DD_DATABASE_PORT}
        securityContext:
          runAsUser: 2 # non-root user
          allowPrivilegeEscalation: false
        resources:
          requests:
            cpu: 50m
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: defectdojo
  annotations:
    iam.gke.io/gcp-service-account: defectdojo@${PROJECT_ID}.iam.gserviceaccount.com
---
apiVersion: iam.cnrm.cloud.google.com/v1beta1
kind: IAMServiceAccount
metadata:
  name: defectdojo
spec:
  displayName: DefectDojo pod identity
---
apiVersion: iam.cnrm.cloud.google.com/v1beta1
kind: IAMPolicyMember
metadata:
  name: defectdojo-sa-ksa
spec:
  member: serviceAccount:${PROJECT_ID}.svc.id.goog[default/defectdojo]
  role: roles/iam.workloadIdentityUser
  resourceRef:
    apiVersion: iam.cnrm.cloud.google.com/v1beta1
    kind: IAMServiceAccount
    name: defectdojo
---
apiVersion: iam.cnrm.cloud.google.com/v1beta1
kind: IAMPolicyMember
metadata:
  name: defectdojo-sql-policy
spec:
  member: serviceAccount:defectdojo@${PROJECT_ID}.iam.gserviceaccount.com
  role: roles/cloudsql.client
  resourceRef:
    kind: Project
---
apiVersion: sql.cnrm.cloud.google.com/v1beta1
kind: SQLInstance
metadata:
  name: ${SQL_INSTANCE}
spec:
  databaseVersion: ${SQL_VERSION}
  region: ${SQL_REGION}
  settings:
    tier: ${SQL_TIER}
---
apiVersion: sql.cnrm.cloud.google.com/v1beta1
kind: SQLDatabase
metadata:
  name: ${DD_DATABASE_NAME}
spec:
  instanceRef:
    name: ${SQL_INSTANCE}
---
apiVersion: sql.cnrm.cloud.google.com/v1beta1
kind: SQLUser
metadata:
  name: ${DD_DATABASE_USER}
spec:
  instanceRef:
    name: ${SQL_INSTANCE}
  host: '%'
  password:
    valueFrom:
      secretKeyRef:
        name: django
        key: DD_DATABASE_PASSWORD
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: django
data:
  DD_DATABASE_TYPE: ${DD_DATABASE_TYPE}
  DD_DATABASE_ENGINE: ${DD_DATABASE_ENGINE}
  DD_DATABASE_HOST: 127.0.0.1
  DD_DATABASE_PORT: '${DD_DATABASE_PORT}'
  DD_DATABASE_NAME: ${DD_DATABASE_NAME}
  DD_DATABASE_USER: ${DD_DATABASE_USER}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: celery
data:
  DD_CELERY_BROKER_HOST: 127.0.0.1
  DD_CELERY_BROKER_USER: ${DD_CELERY_BROKER_USER}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: admin
data:
  DD_ADMIN_FIRST_NAME: ${DD_ADMIN_FIRST_NAME}
  DD_ADMIN_LAST_NAME: ${DD_ADMIN_LAST_NAME}
  DD_ADMIN_MAIL: ${DD_ADMIN_MAIL}
  DD_ADMIN_USER: ${DD_ADMIN_USER}
