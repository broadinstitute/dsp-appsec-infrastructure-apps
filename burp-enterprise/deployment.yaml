apiVersion: apps/v1
kind: Deployment
metadata:
  name: ${DEPLOYMENT}
  namespace: ${NAMESPACE}
spec:
  selector:
    matchLabels:
      service: ${SERVICE}
  template:
    metadata:
      labels:
        service: ${SERVICE}
    spec:
      serviceAccountName: ${SERVICE_ACCOUNT}
      runtimeClassName: gvisor
      nodeSelector:
        cloud.google.com/gke-nodepool: apps

      volumes:
      - name: ${SECRET_CONFIG_VOLUME}
        secret:
          secretName: ${SECRET_CONFIG}
      - name: ${SECRET_LICENSE_VOLUME}
        secret:
          secretName: ${SECRET_LICENSE}

      containers:
      - name: burp-enterprise
        image: us.gcr.io/${PROJECT_ID}/burp-enterprise:${BURP_VERSION}
        imagePullPolicy: Always
        command: ['sh', '-c']
        workingDir: /etc/init.d
        args:
        - cp ${SECRET_CONFIG_PATH}/${SECRET_CONFIG_FILE}
            /usr/local/burpsuite_enterprise/enterpriseServer/${BURP_VERSION}/ &&
          cp ${SECRET_LICENSE_PATH}/${SECRET_LICENSE_FILE}
            /var/lib/BurpSuiteEnterpriseEdition/.BurpSuiteEnterprise/enterprise-server/.java/.userPrefs/burp/ &&
          ./burpsuiteenterpriseedition_agent start &&
          ./burpsuiteenterpriseedition_enterpriseserver start &&
          ./burpsuiteenterpriseedition_webserver start &&
          exec sleep infinity
        ports:
        - name: ${TARGET_PORT}
          containerPort: 8080
        readinessProbe:
          httpGet:
            path: /
            port: ${TARGET_PORT}
          timeoutSeconds: 10
          initialDelaySeconds: 60
        volumeMounts:
        - name: ${SECRET_CONFIG_VOLUME}
          mountPath: ${SECRET_CONFIG_PATH}
        - name: ${SECRET_LICENSE_VOLUME}
          mountPath: ${SECRET_LICENSE_PATH}
        resources:
          requests:
            memory: 2300M

      - name: cloudsql-proxy
        image: gcr.io/cloudsql-docker/gce-proxy
        command:
        - /cloud_sql_proxy
        - -instances=${PROJECT_ID}:${SQL_REGION}:${SQL_INSTANCE}=tcp:${DB_PORT}
        securityContext:
          runAsUser: 2  # non-root user
          allowPrivilegeEscalation: false
---
apiVersion: iam.cnrm.cloud.google.com/v1beta1
kind: IAMPolicyMember
metadata:
  name: ${SERVICE_ACCOUNT}-sa-sql-policy
  namespace: ${NAMESPACE}
spec:
  member: serviceAccount:${SERVICE_ACCOUNT}@${PROJECT_ID}.iam.gserviceaccount.com
  role: roles/cloudsql.client
  resourceRef:
    apiVersion: resourcemanager.cnrm.cloud.google.com/v1beta1
    kind: Project
    external: projects/${PROJECT_ID}
---
apiVersion: sql.cnrm.cloud.google.com/v1beta1
kind: SQLInstance
metadata:
  name: ${SQL_INSTANCE}
  namespace: ${NAMESPACE}
  annotations:
    cnrm.cloud.google.com/deletion-policy: abandon
spec:
  databaseVersion: POSTGRES_11
  region: ${SQL_REGION}
  settings:
    tier: db-custom-1-3840
    backupConfiguration:
      enabled: true
---
apiVersion: sql.cnrm.cloud.google.com/v1beta1
kind: SQLDatabase
metadata:
  name: ${DB_NAME}
  namespace: ${NAMESPACE}
  annotations:
    cnrm.cloud.google.com/deletion-policy: abandon
spec:
  instanceRef:
    name: ${SQL_INSTANCE}
---
apiVersion: sql.cnrm.cloud.google.com/v1beta1
kind: SQLUser
metadata:
  name: ${DB_USER}
  namespace: ${NAMESPACE}
  annotations:
    cnrm.cloud.google.com/deletion-policy: abandon
spec:
  instanceRef:
    name: ${SQL_INSTANCE}
  password:
    valueFrom:
      secretKeyRef:
        name: ${DB_SECRET}
        key: DB_PASSWORD
