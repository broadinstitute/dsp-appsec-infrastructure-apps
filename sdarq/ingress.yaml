apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ${INGRESS}
  namespace: ${NAMESPACE}
  annotations:
    kubernetes.io/ingress.global-static-ip-name: ${IP_NAME}
    networking.gke.io/managed-certificates: ${MANAGED_CERT}
    networking.gke.io/v1beta1.FrontendConfig: ${FRONTEND_CONFIG}
spec:
  rules:
  - host: ${DNS_HOSTNAME}
    http:
      paths:
      - path: /*
        pathType: ImplementationSpecific
        backend:
          service:
            name: ${SERVICE}
            port:
              name: ${FRONTEND_PORT}
      - path: /submit/
        pathType: ImplementationSpecific
        backend:
          service:
            name: ${SERVICE}
            port:
              name: ${BACKEND_PORT}
      - path: /cis_scan/
        pathType: ImplementationSpecific
        backend:
          service:
            name: ${SERVICE}
            port:
              name: ${BACKEND_PORT}
      - path: /cis_results/
        pathType: ImplementationSpecific
        backend:
          service:
            name: ${SERVICE}
            port:
              name: ${BACKEND_PORT}
      - path: /request_tm/
        pathType: ImplementationSpecific
        backend:
          service:
            name: ${SERVICE}
            port:
              name: ${BACKEND_PORT}
      - path: /zap_scan/
        pathType: ImplementationSpecific
        backend:
          service:
            name: ${SERVICE}
            port:
              name: ${BACKEND_PORT}
      - path: /create_sec_control_template/
        pathType: ImplementationSpecific
        backend:
          service:
            name: ${SERVICE}
            port:
              name: ${BACKEND_PORT}
      - path: /edit_sec_controls/
        pathType: ImplementationSpecific
        backend:
          service:
            name: ${SERVICE}
            port:
              name: ${BACKEND_PORT}
      - path: /get_sec_controls/
        pathType: ImplementationSpecific
        backend:
          service:
            name: ${SERVICE}
            port:
              name: ${BACKEND_PORT}
      - path: /get_sec_controls_service/
        pathType: ImplementationSpecific
        backend:
          service:
            name: ${SERVICE}
            port:
              name: ${BACKEND_PORT}
      - path: /request_manual_pentest/
        pathType: ImplementationSpecific
        backend:
          service:
            name: ${SERVICE}
            port:
              name: ${BACKEND_PORT}
---
apiVersion: networking.gke.io/v1beta1
kind: FrontendConfig
metadata:
  name: ${FRONTEND_CONFIG}
  namespace: ${NAMESPACE}
spec:
  sslPolicy: ${ssl_policy}
  redirectToHttps:
    enabled: true
---
apiVersion: cloud.google.com/v1
kind: BackendConfig
metadata:
  name: ${BACKEND_CONFIG}
  namespace: ${NAMESPACE}
spec:
  customResponseHeaders:
    headers:
    - "X-Content-Type-Options:nosniff"
    - "X-Frame-Option:deny"
    - "X-XSS-Protection:1; mode=block"
  timeoutSec: 300
  connectionDraining:
    drainingTimeoutSec: 600
  securityPolicy:
    name: ${BROAD_INGRESS_CSP}
  iap:
    enabled: true
    oauthclientCredentials:
      secretName: ${iap_secret_name}
---
apiVersion: v1
kind: Service
metadata:
  name: ${SERVICE}
  namespace: ${NAMESPACE}
  annotations:
    cloud.google.com/neg: |
      {
        "ingress": true
      }
    cloud.google.com/backend-config: |
      {
        "ports": {
          "${FRONTEND_PORT}": "${BACKEND_CONFIG}",
          "${BACKEND_PORT}": "${BACKEND_CONFIG}"
        }
      }
spec:
  type: NodePort
  selector:
    service: ${SERVICE}
  ports:
  - name: ${FRONTEND_PORT}
    port: 80
    targetPort: ${FRONTEND_PORT}
  - name: ${BACKEND_PORT}
    port: 8080
    targetPort: ${BACKEND_PORT}