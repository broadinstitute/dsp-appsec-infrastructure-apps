apiVersion: apps/v1
kind: Deployment
metadata:
  name: ${DEPLOYMENT}
  namespace: ${NAMESPACE}
spec:
  selector:
    matchLabels:
      service: ${SERVICE}
  template:
    metadata:
      labels:
        service: ${SERVICE}
    spec:
      serviceAccountName: ${SERVICE_ACCOUNT}
      runtimeClassName: gvisor
      nodeSelector:
        cloud.google.com/gke-nodepool: apps

      containers:
      - name: frontend
        image: ${SDARQ_FRONTEND_IMAGE}
        ports:
        - name: ${FRONTEND_PORT}
          containerPort: 80
        readinessProbe:
          httpGet:
            path: /
            port: ${FRONTEND_PORT}
          timeoutSeconds: 10
        resources:
          requests:
            memory: 75M

      - name: backend
        image: ${SDARQ_BACKEND_IMAGE}
        ports:
        - name: ${BACKEND_PORT}
          containerPort: 8080
        envFrom:
        - secretRef:
            name: ${SDARQ_SECRET}
        - configMapRef:
            name: ${SDARQ_CONFIG}
        env:
          - name: PUBSUB_PROJECT_ID
            value: ${PROJECT_ID}
          - name: CIS_JOB_TOPIC
            value: ${CIS_JOB_TOPIC}
          - name: ZAP_JOB_TOPIC
            value: ${ZAP_JOB_TOPIC}
          - name: SC_FIRESTORE_COLLECTION
            value: ${SC_FIRESTORE_COLLECTION}
          - name: CIS_FIRESTORE_COLLECTION
            value: ${CIS_FIRESTORE_COLLECTION}
        readinessProbe:
          httpGet:
            path: /health/
            port: ${BACKEND_PORT}
          timeoutSeconds: 10
        resources:
          requests:
            memory: 75M
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: ${SDARQ_CONFIG}
  namespace: ${NAMESPACE}
data:
  dojo_host: http://${DOJO_SERVICE}.${DOJO_NAMESPACE}/
  sdarq_host: https://${DNS_HOSTNAME}
---
apiVersion: iam.cnrm.cloud.google.com/v1beta1
kind: IAMPolicyMember
metadata:
  name: ${SERVICE_ACCOUNT}-sa-firestore-policy
  namespace: ${NAMESPACE}
spec:
  member: serviceAccount:${SERVICE_ACCOUNT}@${PROJECT_ID}.iam.gserviceaccount.com
  role: roles/datastore.user
  resourceRef:
    apiVersion: resourcemanager.cnrm.cloud.google.com/v1beta1
    kind: Project
    external: projects/${PROJECT_ID}
---
apiVersion: iam.cnrm.cloud.google.com/v1beta1
kind: IAMPolicyMember
metadata:
  name: ${SERVICE_ACCOUNT}-bq-job-policy
  namespace: ${NAMESPACE}
spec:
  member: serviceAccount:${SERVICE_ACCOUNT}@${PROJECT_ID}.iam.gserviceaccount.com
  role: roles/bigquery.jobUser
  resourceRef:
    apiVersion: resourcemanager.cnrm.cloud.google.com/v1beta1
    kind: Project
    external: projects/${PROJECT_ID}
---
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: sdarq-security-controls-monthly
  namespace: ${NAMESPACE}
spec:
  schedule: "0 12 10 12 *"
  jobTemplate:
    spec:
      template:
        spec:
          serviceAccountName: ${CRON_SERVICE_ACCOUNT}
          runtimeClassName: gvisor
          nodeSelector:
            cloud.google.com/gke-nodepool: batch
          restartPolicy: OnFailure

          containers:
          - name: sdarq-security-controls-monthly
            image: ${SDARQ_BACKEND_IMAGE}
            command: ['python3', '/security-controls-reminder.py']
            env:
              - name: DATASET_PROJECT_ID
                value: ${PROJECT_ID}
              - name: SC_FIRESTORE_COLLECTION
                value: ${SC_FIRESTORE_COLLECTION}
              - name: SECURITY_CONTROLS_SLACK_CHANNEL
                valueFrom:
                  secretKeyRef:
                    name: ${SDARQ_SECRET}
                    key: appsec_slack_channel

