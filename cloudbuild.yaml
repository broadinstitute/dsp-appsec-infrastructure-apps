substitutions:
  # replace these values in Cloud Build UI
  _ORG_VIEWER_SA_EMAIL: '' # email of an existing Service Account with Org Viewer role
  _DNS_DOMAIN: '' # fully-resolved DNS domain name (e.g. appsec.example.org)
  _DNS_ZONE: '' # DNS zone name to be created/updated (e.g. appsec)
  _CIS_CONTROLS_IGNORE: ''

options:
  machineType: N1_HIGHCPU_8
  env:
  - PROJECT_ID=${PROJECT_ID}
  - BATCH_DISPATCHER_IMAGE=us.gcr.io/${PROJECT_ID}/batch-dispatcher:${SHORT_SHA}
  - BASTION_IMAGE=us.gcr.io/${PROJECT_ID}/bastion
  - BASTION_PORT=1080
  - CIS_IMAGE=us.gcr.io/${PROJECT_ID}/cis
  - ZAP_IMAGE=us.gcr.io/${PROJECT_ID}/zap:${SHORT_SHA}
  - DD_DJANGO_IMAGE=us.gcr.io/${PROJECT_ID}/defectdojo-django
  - DOCS_IMAGE=us.gcr.io/${PROJECT_ID}/docs:${SHORT_SHA}
  - CODEDX_IMAGE=us.gcr.io/${PROJECT_ID}/codedx
  - SDARQ_FRONTEND_IMAGE=us.gcr.io/${PROJECT_ID}/sdarq-frontend:${SHORT_SHA}
  - SDARQ_BACKEND_IMAGE=us.gcr.io/${PROJECT_ID}/sdarq-backend:${SHORT_SHA}
  - DNS_DOMAIN=${_DNS_DOMAIN}
  - DNS_ZONE=${_DNS_ZONE}
  - TERRAFORM_BUCKET=${PROJECT_ID}-terraform
  - BROAD_INGRESS_CSP=broad-ingress
  - DISK_SNAPSHOT_POLICY=appsec-apps-disk-snapshot-policy
  - JOB_DISPATCHER_ROLE=job-dispatcher
  - GLOBAL_NAMESPACE=global
  - CIS_DATASET=cis
  - CODEDX_NAMESPACE=codedx
  - CODEDX_SERVICE=codedx
  - DOJO_NAMESPACE=defectdojo
  - DOJO_SERVICE=defectdojo
  - SDARQ_SERVICE_ACCOUNT=sdarq-sa
  - REGION=us-east1
  - ZONE_1=us-east1-b
  - ZONE_2=us-east1-c

steps:
### Docker images

# Pre-pull Kaniko image, used to speed up Docker builds.
- id: kaniko
  name: &kaniko gcr.io/kaniko-project/executor:v1.6.0-debug
  entrypoint: 'true'

# build bastion proxy Docker image
- id: bastion-image
  name: *kaniko
  waitFor: ['kaniko']
  entrypoint: sh
  args:
  - -c
  - executor
      --context=dir:///workspace/bastion
      --destination=$${BASTION_IMAGE}
      --cache

# build Batch dispatcher image
- id: batch-dispatcher-image
  name: *kaniko
  waitFor: ['kaniko']
  entrypoint: sh
  args:
  - -c
  - executor
      --context=dir:///workspace/batch
      --destination=$${BATCH_DISPATCHER_IMAGE}
      --cache

# build CIS Docker image
- id: cis-image
  name: *kaniko
  waitFor: ['kaniko']
  entrypoint: sh
  args:
  - -c
  - executor
      --context=dir:///workspace/cis
      --destination=$${CIS_IMAGE}
      --cache

# build patched CodeDx image
- id: codedx-image
  name: *kaniko
  waitFor: ['kaniko']
  entrypoint: sh
  args:
  - -c
  - executor
      --context=dir:///workspace/codedx
      --destination=$${CODEDX_IMAGE}
      --cache

# build patched DefectDojo Django image,
- id: defectdojo-django-image
  name: *kaniko
  waitFor: ['kaniko']
  entrypoint: sh
  args:
  - -c
  - executor
      --context=dir:///workspace/defectdojo
      --dockerfile=Dockerfile.django
      --destination=$${DD_DJANGO_IMAGE}
      --cache

# build SDARQ frontend Docker image
- id: sdarq-frontend-image
  name: *kaniko
  waitFor: ['kaniko']
  entrypoint: sh
  args:
  - -c
  - executor
      --context=dir:///workspace/sdarq/frontend
      --destination=$${SDARQ_FRONTEND_IMAGE}
      --cache

# build SDARQ backend Docker image
- id: sdarq-backend-image
  name: *kaniko
  waitFor: ['kaniko']
  entrypoint: sh
  args:
  - -c
  - executor
      --context=dir:///workspace
      --dockerfile=sdarq/backend/Dockerfile
      --destination=$${SDARQ_BACKEND_IMAGE}
      --cache

# build ZAP Docker image
- id: zap-image
  name: *kaniko
  waitFor: ['kaniko']
  entrypoint: sh
  args:
  - -c
  - executor
      --context=dir:///workspace/zap
      --destination=$${ZAP_IMAGE}
      --cache

### Terraform

# prepare GCS backend for Terraform
- id: terraform-bucket
  name: gcr.io/cloud-builders/gsutil
  waitFor: ['-']
  entrypoint: sh
  args:
  - -c
  - gsutil mb -b on "gs://$${TERRAFORM_BUCKET}" ;
    gsutil versioning set on "gs://$${TERRAFORM_BUCKET}"

# deploy GKE cluster and associated GCP resources
- id: terraform
  name: hashicorp/terraform
  waitFor: ['terraform-bucket', 'bastion-image']
  entrypoint: sh
  dir: terraform
  args:
  - -c
  - terraform init
      -backend-config "bucket=$${TERRAFORM_BUCKET}" &&
    terraform plan -out=plan.out
      -var "project=${PROJECT_ID}"
      -var "region=$${REGION}"
      -var "zones=[\"$${ZONE_1}\",\"$${ZONE_2}\"]"
      -var "global_namespace=$${GLOBAL_NAMESPACE}"
      -var "bastion_image=$${BASTION_IMAGE}"
      -var "bastion_port=$${BASTION_PORT}" &&
    terraform apply plan.out &&
    terraform output | tr -d " " > ../shared/.env

### Services

# set up Config Connector and other shared GKE resources
- id: shared
  name: &kubectl gcr.io/cloud-builders/kubectl
  entrypoint: ./global.sh
  dir: shared


# deploy CIS scanner resources
- id: cis
  name: *kubectl
  waitFor: ['shared', 'batch-dispatcher-image', 'cis-image']
  entrypoint: ./deploy.sh
  dir: cis
  env:
  - CIS_CONTROLS_IGNORE=${_CIS_CONTROLS_IGNORE}

# deploy CodeDx to GKE cluster
- id: codedx
  name: *kubectl
  waitFor: ['shared', 'codedx-image']
  entrypoint: ./deploy.sh
  dir: codedx

# deploy DefectDojo to GKE cluster
- id: defectdojo
  name: *kubectl
  waitFor: ['shared', 'defectdojo-django-image']
  entrypoint: ./deploy.sh
  dir: defectdojo

# deploy SDARQ to GKE cluster
- id: sdarq
  name: *kubectl
  waitFor: ['shared', 'sdarq-backend-image', 'sdarq-frontend-image']
  entrypoint: ./deploy.sh
  dir: sdarq

# deploy Zap to GKE cluster
- id: zap
  name: *kubectl
  waitFor: ['shared', 'batch-dispatcher-image']
  entrypoint: ./deploy.sh
  dir: zap

timeout: 7200s